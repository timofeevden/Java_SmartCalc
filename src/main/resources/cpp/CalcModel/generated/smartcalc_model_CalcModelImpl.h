/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include <cmath>
#include <stack>
#include <string>
#include <vector>
#include <iostream>

/* Header for class smartcalc_model_CalcModel */

#ifndef _Included_smartcalc_model_CalcModel
#define _Included_smartcalc_model_CalcModel
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     smartcalc_model_CalcModelImpl
 * Method:    translateToPolish
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_smartcalc_model_CalcModelImpl_translateToPolish
  (JNIEnv *, jobject, jstring);

/*
 * Class:     smartcalc_model_CalcModelImpl
 * Method:    calculatePolishExpression
 * Signature: (D)D
 */
JNIEXPORT jdouble JNICALL Java_smartcalc_model_CalcModelImpl_calculatePolishExpression
  (JNIEnv *, jobject, jdouble);

/*
 * Class:     smartcalc_model_CalcModelImpl
 * Method:    calculateGraphData
 * Signature: (DDDD)V
 */
JNIEXPORT void JNICALL Java_smartcalc_model_CalcModelImpl_calculateGraphData
  (JNIEnv *, jobject, jdouble, jdouble, jdouble, jdouble);

/*
 * Class:     smartcalc_model_CalcModelImpl
 * Method:    getGraphDataFromDLL
 * Signature: ()Ljava/util/List;
 */
JNIEXPORT jobject JNICALL Java_smartcalc_model_CalcModelImpl_getGraphDataFromDLL
  (JNIEnv *, jobject);

/*
 * Class:     smartcalc_model_CalcModelImpl
 * Method:    getErrorNumber
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_smartcalc_model_CalcModelImpl_getErrorNumber
  (JNIEnv *, jobject);

/*
 * Class:     smartcalc_model_CalcModelImpl
 * Method:    getCalculatingResult
 * Signature: ()D
 */
JNIEXPORT jdouble JNICALL Java_smartcalc_model_CalcModelImpl_getCalculatingResult
  (JNIEnv *, jobject);

#ifdef __cplusplus



namespace s21 {
/**
 * @brief Класс модели стандартного калькулятора
 */
// Errors:
//  2 - лишнняя точка
//  3 - скобки
//  4 - ошибка в экспонентациаьной записи
//  5 - недостаточно чисел для операций или матем. ф-ий или ничего не подошло
//  при вычислении 
//	6 - деление на 0
class CalcModel {
 private:
  CalcModel();
 public:
  CalcModel(const CalcModel&) = delete;
  ~CalcModel();
  static CalcModel* GetInstance();
  
  int TranslateToPolish(const std::string& new_expression);
  int CalculateExpression();
  const std::string& GetExpression() noexcept;
  const std::string& GetPolishExpression() noexcept;
  int GetError() noexcept;
  double GetResult() noexcept;
  void SetX(const double& new_x) noexcept;
  void SetExpression(const std::string& new_expression);
  void SetPolishExpression(const std::string& new_polish_expression);
  void CalculateDataGraph(double x_min, double x_max, double y_min, double y_max);
  const std::vector<double>& GetDataX() noexcept;
  const std::vector<double>& GetDataY() noexcept;

 private:
	static s21::CalcModel* instance_ptr_;
  std::string expression_;
  std::string polish_expression_;
  int error_;
  double result_;
  double x_ = 1.0;
  double step_ = 0.2;
  std::vector<double> data_x_, data_y_;

 private:
  bool CheckBrackets(int& i, std::stack<char>& stack_operators);
  bool CheckOperators(int& i, std::stack<char>& stack_operators);
  bool CheckUnar(int& i, std::stack<char>& stack_operators);
  bool CheckNumber(int& i);
  bool IsOperator(const std::string& expression, int i) noexcept;
  bool IsBrktFunc(int i) noexcept;
  bool IsNumber(char symbol) noexcept;
  bool IsDot(char symbol) noexcept;
  bool LeftAssoc(char operatr) noexcept;
  int Priority(char operatr) noexcept;
  double TakeNumber(int& i);
  void DoArithmetic(double* numbers, int& i_str, int& i_num);
  void DoMathFunc(double* numbers, int& i_str, int& i_num, double& unar_minus);
};


}  //  namespace s21
//s21::CalcModel* s21::CalcModel::instance_ptr_ = nullptr;

}
#endif
#endif
